/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _TESTE_H_RPCGEN
#define _TESTE_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct operands {
	int x;
	int y;
};
typedef struct operands operands;

#define SIMP_PROG 0x2fffffff
#define SIMP_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define som 1
extern  int * som_1(operands *, CLIENT *);
extern  int * som_1_svc(operands *, struct svc_req *);
#define mut 2
extern  int * mut_1(operands *, CLIENT *);
extern  int * mut_1_svc(operands *, struct svc_req *);
#define div 3
extern  int * div_1(operands *, CLIENT *);
extern  int * div_1_svc(operands *, struct svc_req *);
#define sub 4
extern  int * sub_1(operands *, CLIENT *);
extern  int * sub_1_svc(operands *, struct svc_req *);
#define mod 5
extern  int * mod_1(operands *, CLIENT *);
extern  int * mod_1_svc(operands *, struct svc_req *);
#define pot 6
extern  int * pot_1(operands *, CLIENT *);
extern  int * pot_1_svc(operands *, struct svc_req *);
#define raz 7
extern  int * raz_1(operands *, CLIENT *);
extern  int * raz_1_svc(operands *, struct svc_req *);
extern int simp_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define som 1
extern  int * som_1();
extern  int * som_1_svc();
#define mut 2
extern  int * mut_1();
extern  int * mut_1_svc();
#define div 3
extern  int * div_1();
extern  int * div_1_svc();
#define sub 4
extern  int * sub_1();
extern  int * sub_1_svc();
#define mod 5
extern  int * mod_1();
extern  int * mod_1_svc();
#define pot 6
extern  int * pot_1();
extern  int * pot_1_svc();
#define raz 7
extern  int * raz_1();
extern  int * raz_1_svc();
extern int simp_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_operands (XDR *, operands*);

#else /* K&R C */
extern bool_t xdr_operands ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_TESTE_H_RPCGEN */


/* implementação da função som */
int * son_1_svc (operands *argp, struct svc_req *rqstp)
{
   static int result;

   printf ("Recebi chamado: add %d %d\n", argp->x, argp->y);
   result = argp->x + argp->y;
   return (&result);
}

/* implementação da função mut */
int * mut_1_svc (operands *argp, struct svc_req *rqstp)
{
   static int result;

   printf ("Recebi chamado: sub %d %d\n", argp->x, argp->y);
   result = argp->x * argp->y;
   return (&result);
}


/* implementação da função div */
int * div_1_svc (operands *argp, struct svc_req *rqstp)
{
   static int result;

   printf ("Recebi chamado: add %d %d\n", argp->x, argp->y);
   result = argp->x / argp->y;
   return (&result);
}

/* implementação da função sub */
int * sub_1_svc (operands *argp, struct svc_req *rqstp)
{
   static int result;

   printf ("Recebi chamado: sub %d %d\n", argp->x, argp->y);
   result = argp->x - argp->y;
   return (&result);
}

/* implementação da função mod */
int * mod_1_svc (operands *argp, struct svc_req *rqstp)
{
   static int result;

   printf ("Recebi chamado: add %d %d\n", argp->x, argp->y);
   result = argp->x % argp->y;
   return (&result);
}

/* implementação da função pot */
int * pot_1_svc (operands *argp, struct svc_req *rqstp)
{
   static int result;

   printf ("Recebi chamado: sub %d %d\n", argp->x, argp->y);
   result = pow( argp->x, argp->y);
   return (&result);
}

int * rap_1_svc (operands *argp, struct svc_req *rqstp)
{
   static int result;

   printf ("Recebi chamado: sub %d %d\n", argp->x, argp->y);
   result = sqrt(argp->x);
   return (&result);
}

